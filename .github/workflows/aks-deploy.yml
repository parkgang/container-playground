name: aks deploy

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:

env:
  IMAGE_NAME: image
  NAMESPACE: test
  IMAGE_HOST: ghcr.io/${{ github.repository }}

jobs:
  apply:
    runs-on: ubuntu-latest
    steps:
      - name: github action debug
        run: |
          ls -alF

      - name: repo checkout
        uses: actions/checkout@v2

      - name: github action debug
        run: |
          echo github.event_name="${{ github.event_name }}"
          echo github.repository="${{ github.repository }}"
          echo github.ref="${{ github.ref }}"
          echo github.sha="${{ github.sha }}"
          pwd
          ls -alF

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          # docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          # docker push $IMAGE_ID:$VERSION

          echo IMAGE_ID=$IMAGE_ID
          echo TAG=${{ github.sha }}

          docker tag $IMAGE_NAME $IMAGE_ID:${{ github.sha }}
          docker push $IMAGE_ID:${{ github.sha }}

      - name: aks login
        uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          resource-group: 'myResourceGroup'
          cluster-name: 'myAKSCluster'
        id: login

      - name: Create namespace
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -

      - name: aks apply
        uses: Azure/k8s-deploy@v1.4
        with:
          namespace: ${{ env.NAMESPACE }}
          manifests: |
            k8s.yaml
          images: |
            ${{ env.IMAGE_HOST }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
